"use strict";(self.webpackChunksdk_mobile_doc=self.webpackChunksdk_mobile_doc||[]).push([[5551],{25894:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Flow_Component","title":"Flow - Continuous Launch","description":"1. Introduction","source":"@site/android_versioned_docs/version-2.3.X/Flow_Component.md","sourceDirName":".","slug":"/Flow_Component","permalink":"/sdk-mobile-documentation/docs/android/Flow_Component","draft":false,"unlisted":false,"tags":[],"version":"2.3.X","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Video Recording","permalink":"/sdk-mobile-documentation/docs/android/Video_Recording_Component"},"next":{"title":"SDK customization","permalink":"/sdk-mobile-documentation/docs/android/Customization"}}');var r=l(74848),o=l(28453);const i={},s="Flow - Continuous Launch",d={},c=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. Required Dependencies for Integration",id:"2-required-dependencies-for-integration",level:2},{value:"3. Available Controllers",id:"3-available-controllers",level:2},{value:"3.1 Flow Step Controllers",id:"31-flow-step-controllers",level:3},{value:"4. SDK Initialization with Flow",id:"4-sdk-initialization-with-flow",level:2},{value:"5. Using the Component",id:"5-using-the-component",level:2},{value:"5.1 Launching a Published Flow",id:"51-launching-a-published-flow",level:3},{value:"5.2 Launching a Pending Flow for Testing",id:"52-launching-a-pending-flow-for-testing",level:3},{value:"5.3 Collecting Results in Your App",id:"53-collecting-results-in-your-app",level:3},{value:"6. Receiving the Result",id:"6-receiving-the-result",level:2},{value:"6.1 Handling Errors",id:"61-handling-errors",level:3},{value:"6.2 Handling Success - <code>data</code>",id:"62-handling-success---data",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"flow---continuous-launch",children:"Flow - Continuous Launch"})}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Flow is a feature that connects the ",(0,r.jsx)(n.strong,{children:"Design Studio"})," section of the ",(0,r.jsx)(n.strong,{children:"Platform"})," with the SDK and the client implementation. Using a Flow identifier, you can launch a flow designed on the web, which can contain from 1 to N steps using existing SDK components."]}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the ",(0,r.jsx)(n.a,{href:"./Mobile_SDK",children:"Quickstart"})," section for basic SDK setup. This guide covers the specifics of enabling and using Flow."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-required-dependencies-for-integration",children:"2. Required Dependencies for Integration"}),"\n",(0,r.jsxs)(n.p,{children:["No ",(0,r.jsx)(n.strong,{children:"additional dependencies"})," are needed to use Flow."]}),"\n",(0,r.jsx)(n.p,{children:"You must include the dependencies for each component you plan to launch within a flow. For example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.strong,{children:"facial recognition"}),", add the ",(0,r.jsx)(n.strong,{children:"Selphi component"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.strong,{children:"document recognition"}),", add the ",(0,r.jsx)(n.strong,{children:"SelphID component"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"And so on for other components."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-available-controllers",children:"3. Available Controllers"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Controller"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FlowController"}),(0,r.jsx)(n.td,{children:"Main controller to launch published flows."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FlowPreviewController"}),(0,r.jsx)(n.td,{children:"Controller for testing flows pending publication."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"31-flow-step-controllers",children:"3.1 Flow Step Controllers"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Controller"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FSelphiController"}),(0,r.jsx)(n.td,{children:"Facial recognition"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FSelphIDController"}),(0,r.jsx)(n.td,{children:"Document recognition"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FVoiceController"}),(0,r.jsx)(n.td,{children:"Voice capture"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FPhingersController"}),(0,r.jsx)(n.td,{children:"Fingerprint capture"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FNfcController"}),(0,r.jsx)(n.td,{children:"NFC reading"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FQrReaderController"}),(0,r.jsx)(n.td,{children:"QR code reader"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FPhacturasReaderController"}),(0,r.jsx)(n.td,{children:"Invoice capture"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FVideoIdController"}),(0,r.jsx)(n.td,{children:"Video identification"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FVideoCallController"}),(0,r.jsx)(n.td,{children:"Video assistance call"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-sdk-initialization-with-flow",children:"4. SDK Initialization with Flow"}),"\n",(0,r.jsxs)(n.p,{children:["Enable Flow support by setting the ",(0,r.jsx)(n.code,{children:"activateFlow"})," parameter during SDK initialization:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"val sdkConfig = SdkConfigurationData(\n    ...\n    activateFlow = true,\n    ...\n)\n\nval result = SDKController.initSdk(sdkConfig)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-using-the-component",children:"5. Using the Component"}),"\n",(0,r.jsx)(n.h3,{id:"51-launching-a-published-flow",children:"5.1 Launching a Published Flow"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"FlowController"})," to start a flow that has been published on the platform:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'val flowController = FlowController(\n    FlowConfigurationData(\n        id = "flowId",\n        controllers = listOf(FSelphiController(), FSelphIDController()),\n        customerId = "customerId",\n    )\n)\n\nSDKController.launch(flowController)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"52-launching-a-pending-flow-for-testing",children:"5.2 Launching a Pending Flow for Testing"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"FlowPreviewController"})," to test a flow that is not yet published:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'val flowController = FlowPreviewController(\n    FlowConfigurationData(\n        id = "flowId",\n        controllers = listOf(FSelphiController(), FSelphIDController()),\n        customerId = "customerId",\n    )\n)\n\nSDKController.launch(flowController)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"53-collecting-results-in-your-app",children:"5.3 Collecting Results in Your App"}),"\n",(0,r.jsx)(n.p,{children:"By default, flow steps send results directly to the platform. To handle them in your app, collect state updates:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'flowController.stateFlow.collect { flowResult ->\n    Napier.d("APP: FLOW STEP ID ${flowResult.step?.id}")\n\n    when (flowResult.step?.key) {\n        FlowKeys.EXTERNAL_STEP.name -> {\n            delay(DELAY_EXTERNAL_STEP)\n            flowController.launchNextStep()\n        }\n\n        FlowKeys.SELPHI_COMPONENT.name -> {\n            when (val sdkResult = flowResult.result) {\n                is SdkResult.Error -> {\n                    Napier.d("APP: Selphi FLOW ERROR: ${sdkResult.error.getSelphiError().name}")\n                }\n                is SdkResult.Success -> {\n                    val result = sdkResult.data.getSelphiResult()\n                    Napier.d("APP: Selphi OK ${result.bestImage?.bitmap?.byteCount}")\n                }\n            }\n        }\n\n        FlowKeys.SELPHID_COMPONENT.name -> {\n            when (val sdkResult = flowResult.result) {\n                is SdkResult.Error -> {\n                    Napier.d("APP: SelphID FLOW ERROR: ${sdkResult.error.getSelphiError().name}")\n                }\n                is SdkResult.Success -> {\n                    val result = sdkResult.data.getSelphIDResult()\n                    Napier.d("APP: SelphID OK ${result.documentCaptured}")\n                }\n            }\n        }\n    }\n\n    if (flowResult.flowFinish) {\n        Napier.d("APP: FLOW FINISH")\n    }\n}\n\nviewModelScope.launch {\n    SDKController.launch(flowController)\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-receiving-the-result",children:"6. Receiving the Result"}),"\n",(0,r.jsx)(n.p,{children:"The flow result object contains three fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"step"}),": Details of the executed flow step. The ",(0,r.jsx)(n.code,{children:"key"})," identifies which component ran."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"result"}),": The step outcome as an ",(0,r.jsx)(n.code,{children:"SdkResult"}),". See ",(0,r.jsx)(n.a,{href:"Mobile_SDK#6-result-return",children:"Result return"})," in the Android SDK docs for details."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"flowFinish"}),": A boolean indicating whether the entire flow has completed."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"61-handling-errors",children:"6.1 Handling Errors"}),"\n",(0,r.jsxs)(n.p,{children:["If a step fails, ",(0,r.jsx)(n.code,{children:"SdkResult.Error"})," will include:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flowResult.step.key"})," to identify the failed component."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flowResult.result.error"})," with the error details."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"62-handling-success---data",children:["6.2 Handling Success - ",(0,r.jsx)(n.code,{children:"data"})]}),"\n",(0,r.jsxs)(n.p,{children:["On success (",(0,r.jsx)(n.code,{children:"SdkResult.Success"}),"), use the appropriate converter to extract component-specific results. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'flowController.stateFlow.collect { flowResult ->\n    Napier.d("APP: FLOW STEP ID ${flowResult.step?.id}")\n    ...\n}\n\nif (flowResult.flowFinish) {\n    Napier.d("APP: FLOW FINISH")\n}\n'})}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>s});var t=l(96540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);